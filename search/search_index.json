{
    "docs": [
        {
            "location": "/",
            "text": "\u7b97\u6cd5\u7b14\u8bb0",
            "title": "\u4e3b\u9875"
        },
        {
            "location": "/#_1",
            "text": "",
            "title": "\u7b97\u6cd5\u7b14\u8bb0"
        },
        {
            "location": "/Dynamic Programming/70. Climbing Stairs/",
            "text": "70. Climbing Stairs\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\nYou are climbing a stair case. It takes n steps to reach to the top.\n\n\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\n\nNote: Given n will be a positive integer.\n\n\nExample 1:\n\n\nInput: 2\nOutput:  2\nExplanation:  There are two ways to climb to the top.\n\n1. 1 step + 1 step\n2. 2 steps\n\n\n\n\nExample 2:\n\n\nInput: 3\nOutput:  3\nExplanation:  There are three ways to climb to the top.\n\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n\n\n\n70. Climbing Stairs\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u5982\u679c\u91c7\u7528\u8ba1\u7b97\u6392\u5217\u7ec4\u5408\u7684\u65b9\u5f0f\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4e0d\u59a8\u5bf9\u95ee\u9898\u8fdb\u884c\u5206\u89e3\u3002\u5230\u7b2cn\u9636\u7684\u524d\u4e00\u6b65\u5fc5\u7136\u662f\u5728\u7b2cn-1\u9636\u6216n-2\u9636\uff0c\u56e0\u6b64\uff0c\u5230\u7b2cn\u9636\u7684\u8d70\u6cd5\u5c31\u662f\u5230\u7b2cn-1\u9636\u4e0en-2\u9636\u4e4b\u548c\uff1a\n\n\nF(n) = F(n-1) + F(n-2)\n\n\n\u8bb0F(n)\u4e3a\u5230\u7b2cn\u9636\u7684\u8d70\u6cd5\u3002\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\uff1a\n\n\nclass Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 3:\n            return n\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)\n\n\n\n\n\u7136\u800c\uff0c\u9012\u5f52\u867d\u7136\u5199\u8d77\u6765\u7b80\u5355\uff0c\u8fd0\u884c\u6548\u7387\u5374\u4e0d\u9ad8\uff0c\u800c\u4e14\u6709\u5f88\u5927\u7684\u7a7a\u95f4\u5f00\u9500\u3002\u5f53n\u6bd4\u8f83\u5927\u65f6\uff0c\u4e0a\u8ff0\u4ee3\u7801\u53ef\u80fd\u8d85\u65f6\u3002\u56e0\u6b64\uff0c\u5c1d\u8bd5\u5c06\u9012\u5f52\u6539\u4e3a\u9012\u63a8\u7684\u5199\u6cd5\u3002\u5148\u5217\u51fa\u524d\u9762\u7684\u60c5\u51b5\uff1a\n\n\n\n\n\n\n\n\nn\n\n\nF(n)\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1\n\n\n\n\n\n\n2\n\n\n2\n\n\n\n\n\n\n3\n\n\n3\n\n\n\n\n\n\n4\n\n\n5\n\n\n\n\n\n\n5\n\n\n8\n\n\n\n\n\n\n...\n\n\n...\n\n\n\n\n\n\n\n\n\u663e\u7136\uff0c\u8981\u8ba1\u7b97F(n)\uff0c\u4e0d\u59a8\u5148\u8ba1\u7b97F(3), F(4), F(5)\uff0c\u2026\u2026\u4e8e\u662f\uff0c\u53ef\u4ee5\u628a\u4ee3\u7801\u6539\u4e3a\u8fd9\u6837\uff1a\n\n\nclass Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        steps = [1, 2]\n        if n < 3:\n            return n\n        else:\n            for i in range(n-2):\n                steps.append(steps[i] + steps[i+1])\n            return steps[-1]\n\n\n\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u9700\u8981\u4e3aF(1)\u5230F(n)\u5f00\u8f9f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\u5b9e\u9645\u4e0a\u5e76\u4e0d\u9700\u8981\u8fd9\u4e48\u591a\u7a7a\u95f4\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u957f\u5ea6\u4e3a2\u7684\u6570\u7ec4\u5373\u53ef\u3002\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u8986\u76d6\u6389\u4e0d\u518d\u4f7f\u7528\u7684\u6570\u5b57\uff0c\u8981\u901a\u8fc7\u5947\u5076\u5224\u65ad\u6765\u51b3\u5b9a\u8986\u76d6\u54ea\u4e2a\u6570\u5b57\uff0c\u5728\u8fd4\u56de\u7ed3\u679c\u65f6\u4e5f\u8981\u901a\u8fc7\u5947\u5076\u5224\u65ad\u6765\u51b3\u5b9a\u53d6\u54ea\u4e2a\u6570\u5b57\uff0c\u8ba1\u7b97\u673a\u8fdb\u884c\u5947\u5076\u5224\u65ad\u662f\u5f88\u5feb\u7684\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\nclass Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        steps = [1, 2]\n        if n < 3:\n            return n\n        else:\n            for i in range(n-2):\n                if i % 2 == 0:\n                    steps[0] += steps[1]\n                else:\n                    steps[1] += steps[0]\n            if n % 2 == 0:\n                return steps[1]\n            else:\n                return steps[0]",
            "title": "Climbing Stairs"
        },
        {
            "location": "/Dynamic Programming/70. Climbing Stairs/#70-climbing-stairs",
            "text": "",
            "title": "70. Climbing Stairs"
        },
        {
            "location": "/Dynamic Programming/70. Climbing Stairs/#_1",
            "text": "You are climbing a stair case. It takes n steps to reach to the top.  Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?  Note: Given n will be a positive integer.  Example 1:  Input: 2\nOutput:  2\nExplanation:  There are two ways to climb to the top.\n\n1. 1 step + 1 step\n2. 2 steps  Example 2:  Input: 3\nOutput:  3\nExplanation:  There are three ways to climb to the top.\n\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step  70. Climbing Stairs",
            "title": "\u95ee\u9898\u63cf\u8ff0"
        },
        {
            "location": "/Dynamic Programming/70. Climbing Stairs/#_2",
            "text": "\u5982\u679c\u91c7\u7528\u8ba1\u7b97\u6392\u5217\u7ec4\u5408\u7684\u65b9\u5f0f\u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4e0d\u59a8\u5bf9\u95ee\u9898\u8fdb\u884c\u5206\u89e3\u3002\u5230\u7b2cn\u9636\u7684\u524d\u4e00\u6b65\u5fc5\u7136\u662f\u5728\u7b2cn-1\u9636\u6216n-2\u9636\uff0c\u56e0\u6b64\uff0c\u5230\u7b2cn\u9636\u7684\u8d70\u6cd5\u5c31\u662f\u5230\u7b2cn-1\u9636\u4e0en-2\u9636\u4e4b\u548c\uff1a  F(n) = F(n-1) + F(n-2)  \u8bb0F(n)\u4e3a\u5230\u7b2cn\u9636\u7684\u8d70\u6cd5\u3002\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\uff1a  class Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n < 3:\n            return n\n        else:\n            return self.climbStairs(n-1) + self.climbStairs(n-2)  \u7136\u800c\uff0c\u9012\u5f52\u867d\u7136\u5199\u8d77\u6765\u7b80\u5355\uff0c\u8fd0\u884c\u6548\u7387\u5374\u4e0d\u9ad8\uff0c\u800c\u4e14\u6709\u5f88\u5927\u7684\u7a7a\u95f4\u5f00\u9500\u3002\u5f53n\u6bd4\u8f83\u5927\u65f6\uff0c\u4e0a\u8ff0\u4ee3\u7801\u53ef\u80fd\u8d85\u65f6\u3002\u56e0\u6b64\uff0c\u5c1d\u8bd5\u5c06\u9012\u5f52\u6539\u4e3a\u9012\u63a8\u7684\u5199\u6cd5\u3002\u5148\u5217\u51fa\u524d\u9762\u7684\u60c5\u51b5\uff1a     n  F(n)      1  1    2  2    3  3    4  5    5  8    ...  ...     \u663e\u7136\uff0c\u8981\u8ba1\u7b97F(n)\uff0c\u4e0d\u59a8\u5148\u8ba1\u7b97F(3), F(4), F(5)\uff0c\u2026\u2026\u4e8e\u662f\uff0c\u53ef\u4ee5\u628a\u4ee3\u7801\u6539\u4e3a\u8fd9\u6837\uff1a  class Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        steps = [1, 2]\n        if n < 3:\n            return n\n        else:\n            for i in range(n-2):\n                steps.append(steps[i] + steps[i+1])\n            return steps[-1]  \u4e0a\u9762\u7684\u4ee3\u7801\u9700\u8981\u4e3aF(1)\u5230F(n)\u5f00\u8f9f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002\u5b9e\u9645\u4e0a\u5e76\u4e0d\u9700\u8981\u8fd9\u4e48\u591a\u7a7a\u95f4\uff0c\u53ea\u9700\u8981\u4e00\u4e2a\u957f\u5ea6\u4e3a2\u7684\u6570\u7ec4\u5373\u53ef\u3002\u65b9\u6cd5\u662f\uff0c\u6bcf\u6b21\u8986\u76d6\u6389\u4e0d\u518d\u4f7f\u7528\u7684\u6570\u5b57\uff0c\u8981\u901a\u8fc7\u5947\u5076\u5224\u65ad\u6765\u51b3\u5b9a\u8986\u76d6\u54ea\u4e2a\u6570\u5b57\uff0c\u5728\u8fd4\u56de\u7ed3\u679c\u65f6\u4e5f\u8981\u901a\u8fc7\u5947\u5076\u5224\u65ad\u6765\u51b3\u5b9a\u53d6\u54ea\u4e2a\u6570\u5b57\uff0c\u8ba1\u7b97\u673a\u8fdb\u884c\u5947\u5076\u5224\u65ad\u662f\u5f88\u5feb\u7684\u3002\u4ee3\u7801\u5982\u4e0b\uff1a  class Solution:\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        steps = [1, 2]\n        if n < 3:\n            return n\n        else:\n            for i in range(n-2):\n                if i % 2 == 0:\n                    steps[0] += steps[1]\n                else:\n                    steps[1] += steps[0]\n            if n % 2 == 0:\n                return steps[1]\n            else:\n                return steps[0]",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/Dynamic Programming/303. Range Sum Query - Immutable/",
            "text": "303. Range Sum Query - Immutable\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\nGiven an integer array nums, find the sum of the elements between indices i and j (i \u2264 j), inclusive.\n\n\nExample:\n\n\nGiven nums = [-2, 0, 3, -5, 2, -1]\n\nsumRange(0, 2) -> 1\nsumRange(2, 5) -> -1\nsumRange(0, 5) -> -3\n\n\n\n\nNote:\n\n\n\n\nYou may assume that the array does not change.\n\n\nThere are many calls to sumRange function.\n\n\n\n\n303. Range Sum Query - Immutable\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u9898\u76ee\u4e2d\u5f3a\u8c03\u4e86\nsumRange\n\u4f1a\u8c03\u7528\u5f88\u591a\u6b21\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u76f4\u63a5\u8ba1\u7b97\uff0c\u53ef\u80fd\u4f1a\u8d85\u65f6\u3002\u8003\u8651\u6784\u9020\u4e00\u4e2a\nnums\n\u7d2f\u52a0\u6570\u7ec4\nsums\n\uff0c\nsums\n\u7684\u6bcf\u4e2a\u5143\u7d20\u4e3a\nnums\n\u5bf9\u5e94\u4f4d\u7f6e\u53ca\u4e4b\u524d\u7684\u6240\u6709\u6570\u7684\u548c\uff0c\u5373\uff1a\n\n\nnums = [-2, 0, 3, -5, 2, -1]\nsums = [-2, -2, 1, -4, -2, -3]\n\n\n\n\n\u8fd9\u6837\uff0c\u5f53\u6267\u884c\nsumRange\n\u65f6\uff0c\u53ea\u9700\u8981\u4ecesums\u4e2d\u53d6\u51fa\u8fb9\u754c\u503c\uff0c\u7136\u540e\u76f8\u51cf\u5373\u53ef\u3002\n\n\nclass NumArray:\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.sums = []\n        tmp = 0\n        for i in nums:\n            tmp += i\n            self.sums.append(tmp)\n\n    def sumRange(self, i, j):\n        \"\"\"\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        if i == 0:\n            return self.sums[j]\n        else:\n            return self.sums[j] - self.sums[i-1]\n\n\n\n\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e0d\u591f\u7b80\u6d01\uff0c\u5982\u679c\u5728\nsums\n\u7684\u6700\u524d\u9762\u8865\u5145\u4e00\u4e2a0\uff0c\u5c31\u53ef\u4ee5\u907f\u514dif\u8bed\u53e5\uff0c\u4e5f\u65e0\u9700\u4e34\u65f6\u53d8\u91cftmp\u3002\n\n\nclass NumArray:\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.sums = [0]\n        for i, n in enumerate(nums):\n            self.sums.append(self.sums[i] + n)\n\n    def sumRange(self, i, j):\n        \"\"\"\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        return self.sums[j+1] - self.sums[i]",
            "title": "Range Sum Query - Immutable"
        },
        {
            "location": "/Dynamic Programming/303. Range Sum Query - Immutable/#303-range-sum-query-immutable",
            "text": "",
            "title": "303. Range Sum Query - Immutable"
        },
        {
            "location": "/Dynamic Programming/303. Range Sum Query - Immutable/#_1",
            "text": "Given an integer array nums, find the sum of the elements between indices i and j (i \u2264 j), inclusive.  Example:  Given nums = [-2, 0, 3, -5, 2, -1]\n\nsumRange(0, 2) -> 1\nsumRange(2, 5) -> -1\nsumRange(0, 5) -> -3  Note:   You may assume that the array does not change.  There are many calls to sumRange function.   303. Range Sum Query - Immutable",
            "title": "\u95ee\u9898\u63cf\u8ff0"
        },
        {
            "location": "/Dynamic Programming/303. Range Sum Query - Immutable/#_2",
            "text": "\u9898\u76ee\u4e2d\u5f3a\u8c03\u4e86 sumRange \u4f1a\u8c03\u7528\u5f88\u591a\u6b21\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u76f4\u63a5\u8ba1\u7b97\uff0c\u53ef\u80fd\u4f1a\u8d85\u65f6\u3002\u8003\u8651\u6784\u9020\u4e00\u4e2a nums \u7d2f\u52a0\u6570\u7ec4 sums \uff0c sums \u7684\u6bcf\u4e2a\u5143\u7d20\u4e3a nums \u5bf9\u5e94\u4f4d\u7f6e\u53ca\u4e4b\u524d\u7684\u6240\u6709\u6570\u7684\u548c\uff0c\u5373\uff1a  nums = [-2, 0, 3, -5, 2, -1]\nsums = [-2, -2, 1, -4, -2, -3]  \u8fd9\u6837\uff0c\u5f53\u6267\u884c sumRange \u65f6\uff0c\u53ea\u9700\u8981\u4ecesums\u4e2d\u53d6\u51fa\u8fb9\u754c\u503c\uff0c\u7136\u540e\u76f8\u51cf\u5373\u53ef\u3002  class NumArray:\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.sums = []\n        tmp = 0\n        for i in nums:\n            tmp += i\n            self.sums.append(tmp)\n\n    def sumRange(self, i, j):\n        \"\"\"\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        if i == 0:\n            return self.sums[j]\n        else:\n            return self.sums[j] - self.sums[i-1]  \u4e0a\u9762\u7684\u4ee3\u7801\u4e0d\u591f\u7b80\u6d01\uff0c\u5982\u679c\u5728 sums \u7684\u6700\u524d\u9762\u8865\u5145\u4e00\u4e2a0\uff0c\u5c31\u53ef\u4ee5\u907f\u514dif\u8bed\u53e5\uff0c\u4e5f\u65e0\u9700\u4e34\u65f6\u53d8\u91cftmp\u3002  class NumArray:\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        self.sums = [0]\n        for i, n in enumerate(nums):\n            self.sums.append(self.sums[i] + n)\n\n    def sumRange(self, i, j):\n        \"\"\"\n        :type i: int\n        :type j: int\n        :rtype: int\n        \"\"\"\n        return self.sums[j+1] - self.sums[i]",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/Dynamic Programming/338. Counting Bits/",
            "text": "338. Counting Bits\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\nGiven a non negative integer number num. For every numbers i in the range 0 \u2264 i \u2264 num calculate the number of 1's in their binary representation and return them as an array.\n\n\nExample:\nFor \nnum = 5\n you should return \n[0,1,1,2,1,2]\n.\n\n\nFollow up:\n\n\n\n\nIt is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?\n\n\nSpace complexity should be O(n).\n\n\nCan you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.\n\n\n\n\n338. Counting Bits\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u5148\u5217\u51fa\u524d\u9762\u7684\u60c5\u51b5\uff0c\u7136\u540e\u627e\u89c4\u5f8b\uff1a\n\n\n\n\n\n\n\n\nn\n\n\nn\u7684\u4e8c\u8fdb\u5236\n\n\nF(n)\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n0\n\n\n\n\n\n\n1\n\n\n1\n\n\n1\n\n\n\n\n\n\n2\n\n\n10\n\n\n1\n\n\n\n\n\n\n3\n\n\n11\n\n\n2\n\n\n\n\n\n\n4\n\n\n100\n\n\n1\n\n\n\n\n\n\n5\n\n\n101\n\n\n2\n\n\n\n\n\n\n6\n\n\n110\n\n\n2\n\n\n\n\n\n\n7\n\n\n111\n\n\n3\n\n\n\n\n\n\n8\n\n\n1000\n\n\n1\n\n\n\n\n\n\n...\n\n\n...\n\n\n...\n\n\n\n\n\n\n\n\n\u5176\u4e2d\uff0cF(n)\u8868\u793an\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4e2d1\u7684\u6570\u91cf\u3002\n\n\nF(0)=0\u3002\u6ce8\u610f\u5230\uff0c\u82e5n=2^x\uff0c\u90a3\u4e48F(n)=1\uff0c\u6b64\u65f6n\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u53ea\u6709\u6700\u9ad8\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4f4d\u5747\u4e3a0\u3002\u5176\u4f59\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u6700\u9ad8\u4f4d\u76841\u548c\u540e\u9762\u7684\u4f4d\u3002\u4f8b\u59826\u7684\u4e8c\u8fdb\u5236\u662f\n110\n\uff0c\u53bb\u6389\u6700\u9ad8\u4f4d\u5c31\u662f\n10\n\uff0c\u663e\u7136\u6709\uff1aF(6)=F(2)+1\u3002\n\n\n\n\nF(0) = 0\n\n\nF(1) = 1\n\n\nF(2) = 1\n\n\nF(3) = F(3-2) + 1\n\n\nF(4) = 1\n\n\nF(5) = F(5-4) + 1\n\n\nF(6) = F(5-4) + 1\n\n\nF(7) = F(7-4) + 1\n\n\nF(8) = 1\n\n\n......\n\n\n\n\n\u6839\u636e\u4e0a\u8ff0\u89c4\u5f8b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\n\n\nclass Solution:\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        tmp = []\n        j = 0\n        for i in range(num+1):\n            if i == 0:\n                tmp.append(0)\n            elif i == 2 ** j:\n                tmp.append(1)\n                j += 1\n            else:\n                tmp.append(tmp[i-2**(j-1)]+1)\n        return tmp\n\n\n\n\n\u5176\u5b9e\uff0c\u8fd8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\u3002\u4e0a\u9762\u8003\u8651\u7684\u662fn\u548c\u53bb\u6389n\u7684\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u8fd8\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684\u3002\u5982\u679c\u8003\u8651n\u548c\u53bb\u6389n\u7684\u4e8c\u8fdb\u5236\u6700\u4f4e\u4f4d\u5462\uff1f\u53bb\u6389n\u7684\u4e8c\u8fdb\u5236\u6700\u4f4e\u4f4d\u4e5f\u5c31\u76f8\u5f53\u4e8e\u628an\u7684\u4e8c\u8fdb\u5236\u5f80\u53f3\u79fb\u52a81\u4f4d\uff0c\u8fd9\u6837\u6700\u540e\u4e00\u4f4d\u5c31\u6ca1\u6709\u4e86\uff0c\u800c\u6700\u540e\u4e00\u4f4d\u662f0\u8fd8\u662f1\u53ef\u4ee5\u901a\u8fc7n\u7684\u5947\u5076\u6027\u6765\u5224\u65ad\uff1a\n\n\nclass Solution:\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        tmp = [0]\n        for i in range(1, num+1):\n            tmp.append(tmp[i>>1] + i%2)\n        return tmp\n\n\n\n\ni>>1\n\u4e5f\u53ef\u4ee5\u5199\u6210\ni//2\n\u3002",
            "title": "Counting Bits"
        },
        {
            "location": "/Dynamic Programming/338. Counting Bits/#338-counting-bits",
            "text": "",
            "title": "338. Counting Bits"
        },
        {
            "location": "/Dynamic Programming/338. Counting Bits/#_1",
            "text": "Given a non negative integer number num. For every numbers i in the range 0 \u2264 i \u2264 num calculate the number of 1's in their binary representation and return them as an array.  Example:\nFor  num = 5  you should return  [0,1,1,2,1,2] .  Follow up:   It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?  Space complexity should be O(n).  Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.   338. Counting Bits",
            "title": "\u95ee\u9898\u63cf\u8ff0"
        },
        {
            "location": "/Dynamic Programming/338. Counting Bits/#_2",
            "text": "\u5148\u5217\u51fa\u524d\u9762\u7684\u60c5\u51b5\uff0c\u7136\u540e\u627e\u89c4\u5f8b\uff1a     n  n\u7684\u4e8c\u8fdb\u5236  F(n)      0  0  0    1  1  1    2  10  1    3  11  2    4  100  1    5  101  2    6  110  2    7  111  3    8  1000  1    ...  ...  ...     \u5176\u4e2d\uff0cF(n)\u8868\u793an\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u4e2d1\u7684\u6570\u91cf\u3002  F(0)=0\u3002\u6ce8\u610f\u5230\uff0c\u82e5n=2^x\uff0c\u90a3\u4e48F(n)=1\uff0c\u6b64\u65f6n\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u53ea\u6709\u6700\u9ad8\u4f4d\u4e3a1\uff0c\u5176\u4f59\u4f4d\u5747\u4e3a0\u3002\u5176\u4f59\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u6700\u9ad8\u4f4d\u76841\u548c\u540e\u9762\u7684\u4f4d\u3002\u4f8b\u59826\u7684\u4e8c\u8fdb\u5236\u662f 110 \uff0c\u53bb\u6389\u6700\u9ad8\u4f4d\u5c31\u662f 10 \uff0c\u663e\u7136\u6709\uff1aF(6)=F(2)+1\u3002   F(0) = 0  F(1) = 1  F(2) = 1  F(3) = F(3-2) + 1  F(4) = 1  F(5) = F(5-4) + 1  F(6) = F(5-4) + 1  F(7) = F(7-4) + 1  F(8) = 1  ......   \u6839\u636e\u4e0a\u8ff0\u89c4\u5f8b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a  class Solution:\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        tmp = []\n        j = 0\n        for i in range(num+1):\n            if i == 0:\n                tmp.append(0)\n            elif i == 2 ** j:\n                tmp.append(1)\n                j += 1\n            else:\n                tmp.append(tmp[i-2**(j-1)]+1)\n        return tmp  \u5176\u5b9e\uff0c\u8fd8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\u3002\u4e0a\u9762\u8003\u8651\u7684\u662fn\u548c\u53bb\u6389n\u7684\u4e8c\u8fdb\u5236\u6700\u9ad8\u4f4d\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u8fd8\u662f\u6bd4\u8f83\u9ebb\u70e6\u7684\u3002\u5982\u679c\u8003\u8651n\u548c\u53bb\u6389n\u7684\u4e8c\u8fdb\u5236\u6700\u4f4e\u4f4d\u5462\uff1f\u53bb\u6389n\u7684\u4e8c\u8fdb\u5236\u6700\u4f4e\u4f4d\u4e5f\u5c31\u76f8\u5f53\u4e8e\u628an\u7684\u4e8c\u8fdb\u5236\u5f80\u53f3\u79fb\u52a81\u4f4d\uff0c\u8fd9\u6837\u6700\u540e\u4e00\u4f4d\u5c31\u6ca1\u6709\u4e86\uff0c\u800c\u6700\u540e\u4e00\u4f4d\u662f0\u8fd8\u662f1\u53ef\u4ee5\u901a\u8fc7n\u7684\u5947\u5076\u6027\u6765\u5224\u65ad\uff1a  class Solution:\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        tmp = [0]\n        for i in range(1, num+1):\n            tmp.append(tmp[i>>1] + i%2)\n        return tmp  i>>1 \u4e5f\u53ef\u4ee5\u5199\u6210 i//2 \u3002",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/Dynamic Programming/343. Integer Break/",
            "text": "343. Integer Break\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\nGiven a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.\n\n\nFor example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).\n\n\nNote: You may assume that n is not less than 2 and not larger than 58. \n\n\n343. Integer Break\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u8fd9\u4e2a\u9898\u76ee\u5982\u679c\u627e\u5230\u89c4\u5f8b\u4e86\u5c31\u5f88\u7b80\u5355\uff0c\u96be\u70b9\u5728\u4e0e\u627e\u89c4\u5f8b\u3002\n\n\n\u5148\u770b\u524d\u9762\u51e0\u79cd\u60c5\u51b5\uff1a\n\n\n\n\n2=1+1, 1x1=1, 2>1\n\n\n3=2+1, 2x1=2, 3>2\n\n\n4=2+2, 2x2=4, 4=4\n\n\n5=3+2, 3x2=6, 5<6\n\n\n6=3+3, 3x3=9, 6<9\n\n\n\n\n\u5bf9\u4e8e\u62c6\u5206\uff0c\u6709\u8fd9\u6837\u7684\u7279\u70b9\uff1a\n\n\n\n\n\u9664\u4e862,3\uff0c\u4e0d\u62c61\uff0c\u56e0\u4e3a1\u5e76\u4e0d\u4f1a\u6539\u53d8\u4e58\u79ef\uff0c\u6240\u4ee5\u62c61\u7684\u4e58\u79ef\u4e0d\u662f\u6700\u5927\n\n\n\u5bf9\u4e8e\u5927\u4e8e4\u7684\uff0c\u4e00\u5b9a\u8981\u62c6\uff0c\u56e0\u4e3a\u62c6\u4e4b\u540e\u80fd\u8ba9\u4e58\u79ef\u66f4\u5927\n\n\n\u5982\u679c\u67d0\u6570\u62c6\u4e4b\u540e\u5269\u4f594\uff0c\u90a3\u4e484\u53ef\u62c6\u53ef\u4e0d\u62c6\n\n\n\n\n\u57fa\u4e8e\u4e0a\u8ff0\u7684\u7279\u70b9\u5206\u6790\uff0c\u62c6\u5206\u7684\u6570\u5168\u4e3a3\u548c2\uff084\u7b49\u4ef7\u4e3a2x2\uff09\uff0c\u4e14\u4f18\u5148\u62c63\uff0c\u56e0\u4e3a3x3>2x2x2\u3002\u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u5927\u4e8e6\u7684\u6570\uff0c\u4e0d\u96be\u53d1\u73b0\uff1a\n\n\nF(n) = 3 * F(n-3)\n\n\n\u5176\u4e2d\uff0cF(n)\u4e3a\u6570\u5b57n\u62c6\u5206\u540e\u7684\u6700\u5927\u4e58\u79ef\u3002\n\n\n\u627e\u5230\u4e0a\u8ff0\u89c4\u5f8b\u540e\uff0c\u4ee3\u7801\u5c31\u975e\u5e38\u5bb9\u6613\u4e86\uff1a\n\n\nclass Solution:\n    def integerBreak(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        tmp = [0, 0, 1, 2, 4, 6, 9]\n        if n < 7:\n            return tmp[n]\n        else:\n            for i in range(7, n+1):\n                tmp.append(3*tmp[i-3])\n            return tmp[-1]",
            "title": "Integer Break"
        },
        {
            "location": "/Dynamic Programming/343. Integer Break/#343-integer-break",
            "text": "",
            "title": "343. Integer Break"
        },
        {
            "location": "/Dynamic Programming/343. Integer Break/#_1",
            "text": "Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.  For example, given n = 2, return 1 (2 = 1 + 1); given n = 10, return 36 (10 = 3 + 3 + 4).  Note: You may assume that n is not less than 2 and not larger than 58.   343. Integer Break",
            "title": "\u95ee\u9898\u63cf\u8ff0"
        },
        {
            "location": "/Dynamic Programming/343. Integer Break/#_2",
            "text": "\u8fd9\u4e2a\u9898\u76ee\u5982\u679c\u627e\u5230\u89c4\u5f8b\u4e86\u5c31\u5f88\u7b80\u5355\uff0c\u96be\u70b9\u5728\u4e0e\u627e\u89c4\u5f8b\u3002  \u5148\u770b\u524d\u9762\u51e0\u79cd\u60c5\u51b5\uff1a   2=1+1, 1x1=1, 2>1  3=2+1, 2x1=2, 3>2  4=2+2, 2x2=4, 4=4  5=3+2, 3x2=6, 5<6  6=3+3, 3x3=9, 6<9   \u5bf9\u4e8e\u62c6\u5206\uff0c\u6709\u8fd9\u6837\u7684\u7279\u70b9\uff1a   \u9664\u4e862,3\uff0c\u4e0d\u62c61\uff0c\u56e0\u4e3a1\u5e76\u4e0d\u4f1a\u6539\u53d8\u4e58\u79ef\uff0c\u6240\u4ee5\u62c61\u7684\u4e58\u79ef\u4e0d\u662f\u6700\u5927  \u5bf9\u4e8e\u5927\u4e8e4\u7684\uff0c\u4e00\u5b9a\u8981\u62c6\uff0c\u56e0\u4e3a\u62c6\u4e4b\u540e\u80fd\u8ba9\u4e58\u79ef\u66f4\u5927  \u5982\u679c\u67d0\u6570\u62c6\u4e4b\u540e\u5269\u4f594\uff0c\u90a3\u4e484\u53ef\u62c6\u53ef\u4e0d\u62c6   \u57fa\u4e8e\u4e0a\u8ff0\u7684\u7279\u70b9\u5206\u6790\uff0c\u62c6\u5206\u7684\u6570\u5168\u4e3a3\u548c2\uff084\u7b49\u4ef7\u4e3a2x2\uff09\uff0c\u4e14\u4f18\u5148\u62c63\uff0c\u56e0\u4e3a3x3>2x2x2\u3002\u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u5927\u4e8e6\u7684\u6570\uff0c\u4e0d\u96be\u53d1\u73b0\uff1a  F(n) = 3 * F(n-3)  \u5176\u4e2d\uff0cF(n)\u4e3a\u6570\u5b57n\u62c6\u5206\u540e\u7684\u6700\u5927\u4e58\u79ef\u3002  \u627e\u5230\u4e0a\u8ff0\u89c4\u5f8b\u540e\uff0c\u4ee3\u7801\u5c31\u975e\u5e38\u5bb9\u6613\u4e86\uff1a  class Solution:\n    def integerBreak(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        tmp = [0, 0, 1, 2, 4, 6, 9]\n        if n < 7:\n            return tmp[n]\n        else:\n            for i in range(7, n+1):\n                tmp.append(3*tmp[i-3])\n            return tmp[-1]",
            "title": "\u601d\u8def\u5206\u6790"
        },
        {
            "location": "/Dynamic Programming/357. Count Numbers with Unique Digits/",
            "text": "357. Count Numbers with Unique Digits\n\n\n\u95ee\u9898\u63cf\u8ff0\n\n\nGiven a non-negative integer n, count all numbers with unique digits, x, where 0 \u2264 x < 10^n.\n\n\nExample:\nGiven n = 2, return 91. (The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding \n[11,22,33,44,55,66,77,88,99]\n)\n\n\n357. Count Numbers with Unique Digits\n\n\n\u601d\u8def\u5206\u6790\n\n\n\u53ef\u4ee5\u5206\u4e3a\u6700\u9ad8\u4f4d\u4e3a0\u548c\u4e0d\u4e3a0\u4e24\u79cd\u60c5\u51b5\uff1a\u5bf9\u4e8e\u524d\u8005\uff0c\u7b49\u4e8en-1\u65f6\u7684\u6570\u91cf\uff1b\u5bf9\u4e8e\u540e\u8005\uff0c\u76f4\u63a5\u8ba1\u7b97\u5373\u53ef\u3002\n\n\n\u8fb9\u754c\u6761\u4ef6\uff1an=0\u65f6\uff0c\u53ea\u67090\u8fd9\u4e00\u79cd\u60c5\u51b5\u7b26\u5408\u9898\u610f\uff1bn>10\u65f6\uff0c\u7ed3\u679c\u90fd\u7b49\u4e8en=10\u7684\u60c5\u51b5\u3002\n\n\nclass Solution:\n    def countNumbersWithUniqueDigits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        else:\n            n = min(n, 10)\n            arr = [9, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n            a = self.countNumbersWithUniqueDigits(n-1)\n            b = 1\n            for i in range(n):\n                b *= arr[i]\n            return a + b",
            "title": "Count Numbers with Unique Digits"
        },
        {
            "location": "/Dynamic Programming/357. Count Numbers with Unique Digits/#357-count-numbers-with-unique-digits",
            "text": "",
            "title": "357. Count Numbers with Unique Digits"
        },
        {
            "location": "/Dynamic Programming/357. Count Numbers with Unique Digits/#_1",
            "text": "Given a non-negative integer n, count all numbers with unique digits, x, where 0 \u2264 x < 10^n.  Example:\nGiven n = 2, return 91. (The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding  [11,22,33,44,55,66,77,88,99] )  357. Count Numbers with Unique Digits",
            "title": "\u95ee\u9898\u63cf\u8ff0"
        },
        {
            "location": "/Dynamic Programming/357. Count Numbers with Unique Digits/#_2",
            "text": "\u53ef\u4ee5\u5206\u4e3a\u6700\u9ad8\u4f4d\u4e3a0\u548c\u4e0d\u4e3a0\u4e24\u79cd\u60c5\u51b5\uff1a\u5bf9\u4e8e\u524d\u8005\uff0c\u7b49\u4e8en-1\u65f6\u7684\u6570\u91cf\uff1b\u5bf9\u4e8e\u540e\u8005\uff0c\u76f4\u63a5\u8ba1\u7b97\u5373\u53ef\u3002  \u8fb9\u754c\u6761\u4ef6\uff1an=0\u65f6\uff0c\u53ea\u67090\u8fd9\u4e00\u79cd\u60c5\u51b5\u7b26\u5408\u9898\u610f\uff1bn>10\u65f6\uff0c\u7ed3\u679c\u90fd\u7b49\u4e8en=10\u7684\u60c5\u51b5\u3002  class Solution:\n    def countNumbersWithUniqueDigits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 1\n        else:\n            n = min(n, 10)\n            arr = [9, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n            a = self.countNumbersWithUniqueDigits(n-1)\n            b = 1\n            for i in range(n):\n                b *= arr[i]\n            return a + b",
            "title": "\u601d\u8def\u5206\u6790"
        }
    ]
}